
from abc import ABC, abstractmethod
from enum import Enum
from llm_orchestrator.exceptions.llm_exception import LLMException

class LLMClientType(Enum):
    GEMINI="GEMINI"    
class BaseLLM(ABC):
    
    @abstractmethod
    def set_context(self, context: dict):
        """
        Set the context for future interactions with the LLM.

        Args:
            context (dict): A dictionary containing context information to be used
                            by the LLM in subsequent queries or operations.

        Raises:
            LLMException: If the method is not implemented.
        """

        raise LLMException("Method not implemented")
    
    @abstractmethod
    async def ask(self, prompt, config = None):
        """
        Asynchronously send a prompt to the LLM for processing and return the result.

        Args:
            prompt: The input text that needs to be processed by the LLM.
            config: Optional configuration settings for customizing the query.
                    Defaults to None.

        Returns:
            A response generated by the LLM based on the provided prompt.

        Raises:
            LLMException: If the method is not implemented.
        """

        raise LLMException("Method not implemented")
    
    @abstractmethod
    async def embeddings(self, texts: list[str])->list[list[float]]:
        """
        Asynchronously generate embeddings for a list of text inputs.

        Args:
            texts (list[str]): A list of strings for which embeddings need to be generated.

        Returns:
            list[list[float]]: A list of embeddings, where each embedding is a list of
            floats representing the vector for the corresponding input text.

        Raises:
            LLMException: If the method is not implemented.
        """
        raise LLMException("Method not implemented")